2. 全体像（レイヤ & コンポーネント）,,,,
,[Presentation],,プレゼンテーション層,
,  ├─ Micro Frontends (見積/受注/出荷/在庫/計画/実績 ...),,複数のマイクロサービスに対応するUIを、独立した小さなフロントエンドとして開発・デプロイする,
,  ├─ 共通デザインシステム / i18n / A11y,,i18n（Internationalization）：多言語対応、A11y（Accessibility）：アクセシビリティ対応,
,"  └─ BFF per Domain (GraphQL/REST, 認可/集約/キャッシュ)",,領域（ドメイン）ごとにBFF（Backend for Frontend）を構築する,
,,,流行りのBFFアーキテクチャとは？｜Offers Tech Blog,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,マイクロサービスによってバックエンドロジックが分散化してしまうことで、,
,,,フロントエンドからの呼び出しが複雑化してしまう問題を解決するためのゲートウェイ,
,,,,
,[Domain Templates],,ドメインテンプレート層,
,  ├─ ms-quote-core (+ Vertical Packs: metal/food/…),,各業務領域ごとにコア機能と業界別（金属加工、食品加工など）に拡張ライブラリを追加する構成,
,  ├─ ms-order / ms-ship / ms-inventory,,業務領域例：見積（quote）、注文（order）、出荷（ship）、在庫（inventory）、計画（plan）、生産（prod）、予測（forecast）,
,  ├─ ms-plan  / ms-prod  / ms-forecast,,database-per-service：マイクロサービスごとに専用のデータベースを持つ,
,  └─ database-per-service + Outbox（整合イベント発行）,,Outboxパターン：データベーストランザクションとイベント発行の整合性を保つための手法,
,,,,
,[Platform],,プラットフォーム層：インフラ側で必要となる機能要件,
,"  ├─ Identity & Access（SSO, RBAC/ABAC, Tenant isolation）",,ユーザー認証、認可、マルチテナント環境でのテナント隔離,
,,,RBAC/ABAC：Role/Attribute-Based Access Control（役割を元にしたアクセス制御）,
,  ├─ Tenant Manager & Billing,,複数の顧客（テナント）を管理、利用状況に応じた課金を行う機能,
,,,★具体的な仕組みについては言及されていない,
,  ├─ Template/Plugin Registry（テンプレ/Vertical Pack/互換性管理）,,テンプレートや拡張ライブラリの管理、互換性の確保を担う機能,
,,,★具体的な管理の仕組みについては言及されていない,
★,  ├─ AppConfig（テナント設定・Feature Flag・MFE解決）,,実行時に動的に変更可能な設定を管理する,
,,,テナントごとの設定,
,,,新機能の有効/無効を切り替える（Feature Flag）,
,,,マイクロフロントエンド（MFE）の解決（どのサービスにルーティングするか）,
,"  ├─ Event Bus（Pub/Sub, スキーマ版管理）",,メッセージング基盤。,
,,,Pub/Sub（Publish/Subscribe）モデルの使用、イベントのスキーマ（データ構造）のバージョン管理,
,  ├─ Workflow Orchestrator（BPMN/DMN/Step Functions/Temporal）,,複数のマイクロサービスにまたがる複雑なビジネスプロセスを調整（オーケストレーション）する,
,,,承認フロー：BPMN（Business Process Model and Notation）、DMN（Decision Model and Notation）,
,,,システムワークフロー：Step Functions、Temporal,
,  ├─ Canonical Data Model（CDM）/ API&Event Contracts,,カノニカルデータモデル：システム間の統合をシンプルにすることを目的としたモデル。,
,,,,異なるシステム間での連携において、データを統一した「共通の形式」に変換してやり取りを行う。
,,,,「Canonical Model」と「Bounded Context Model」の違い #Design - Qiita
,,,API・イベントの規約を定義・管理,
,  ├─ Data Services（監査ログ、全文検索、分析連携/DWH）,,データ関連の機能（監査ログの記録、全文検索機能の提供、データウェアハウス（DWH）との連携など）,
,  └─ Observability（ログ/メトリクス/トレース）,,システム全体の健全性を監視し、問題解決を支援するための機能,
,,,ログ、メトリクス（パフォーマンスの数値）、トレース（リクエストの追跡）,
,,,★具体的な仕組みについては言及されていない,
,,,,
,[Integration],,インテグレーション（連携・統合）層,
,  ├─ 外部SaaS/社内システム（会計/EDI/WMS/SFA 等）,,想定連携対象サービス（WMS：倉庫管理システム）,
,  └─ Inbound API / Webhook / CDC,,外部システムからのデータを受け取るための各種インターフェース,
,,,Inbound API：外部からのリクエストに応答する標準的なAPI,
,,,Webhook：特定のイベントが発生したときに外部から通知を受け取る仕組み,
,,,CDC（Change Data Capture）：データベースの変更をリアルタイムで捕捉する技術,
,,,,
,[Edge],,エッジ層,
,  ├─ Edge Agent（双方向同期/オフライン/ローカルUI/周辺機器）,,サーバーと物理的な場所にあるエージェント間で、双方向のデータ同期を行う,
,,,オフラインでの動作、ローカルでのUI表示、周辺機器との連携,
,  └─ デバイス連携（OPC-UA/Modbus/ラベル/スキャナ/秤）,,IoTデバイスや工場内の機器との通信（OPC-UA・Modbus：通信プロトコル）,
,,,,
,,,,
,,,,「
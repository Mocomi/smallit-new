

# Git 同期ルール (AIによる安全な自動実行)

## 1. このルールの目的と背景

「@sync」でGitリポジトリをリモートと自動同期します。

このルールは、AIアシスタントがユーザーの代わりにGit同期処理を安全かつ自動的に実行するための手順を定義します。

**背景**: AIは非対話的なコマンドライン環境で動作します。そのため、`vim` や `nano` などのテキストエディタや、`less` などのページャを起動するコマンドを実行すると、ユーザーからの入力を待ち続けてしまい、処理が停止してしまいます。この問題を完全に回避し、スムーズな自動同期を実現するため、以下の厳格なルールを設けます。

**目的**: 全てのGit操作をエディタやページャなしで完結しつつ、コンフリクトはAIが提案します。あわせて、気づかないうちにフォルダ/ファイルの場所や名前が変わることを防ぐため、同期の前後でわかりやすい変更通知を出します。

## 2. 実行手順
1. `git status` で現状を確認します
2. 未コミット変更があれば自動コミット: `git commit -m "🤖 自動コミット: <変更概要>"`
3. `git fetch origin` でリモートの最新情報を取得します
   - 変更プレビュー通知（取得時）: 取得後すぐに、直近の状態と見比べて「フォルダ/ファイルの名前変更・移動・追加・削除」を一覧でお知らせします。
     - この段階では、まだローカルの中身は変えません（事前確認のためのプレビューです）
     - フォルダ単位の動きもまとめて表示します（例: 「フォルダA配下がまるごとフォルダBへ移動」）
4. `git pull origin main --no-edit --no-rebase` を試行
   - 成功時: ステップ6に進みます
   - Fast-forward失敗時: `git merge origin/main --no-edit` 実行
   - コンフリクト発生時: ステップ5に進みます
5. **コンフリクトの自動解決**:
   a. AIはコンフリクトが発生したファイルを特定します
   b. AIは各ファイルのコンフリクトマーカー（`<<<<<<<`, `=======`, `>>>>>>>`）を読み取り、両者の変更内容を分析します
   c. 両方の変更を可能な限り維持する形で解決案（マージ後のファイル内容）を生成します（例：「追記」や「異なる行への変更」であれば両方を採用する）
   d. ユーザーに解決案を提示します。その際、差分は `git diff --no-pager ...` のような**ページャを起動しないコマンド**で生成するか、AIが内部的にテキストを比較して生成し、チャット上に直接表示します
   e. ユーザーに「コンフリクトが発生しましたが、この解決案でよろしいですか？」と、差分形式で解決案を提示し、承認を待ちます
   f. 承認が得られたら、AIは解決案をファイルに適用し、`git add .` を実行後、`git commit -m "🤖 自動コミット: コンフリクトを解決"` を実行します
   g. 承認が得られない場合、またはAIが自動解決できない複雑なコンフリクトの場合は、処理を中断し、専門家の確認を促します
6. `git push origin main` でリモートリポジトリに反映します
7. 変更サマリー通知（同期後）: 実際に取り込まれた変更を「名前変更・移動・追加・削除」でわかりやすくまとめてお知らせします。フォルダの場所や名前が変わった場合は冒頭で強調します。
8. 完了報告

## 3. 重要な設定

**いかなる場合も、Gitコマンド実行時にテキストエディタやページャ（lessなど）を起動してはなりません。**
- **全てのコミットで `--no-edit` 使用**（エディタ回避）
- **全てのページャ出力で `--no-pager` 使用または `| cat` パイプ**
- マージ失敗時はユーザーに確認
- エラー時は処理中断
- 全ての操作はコマンドライン引数 (`-m`) やオプション (`--no-edit`, `--no-pager`)、パイプ (`| cat`)、またはファイルI/Oによって完結させてください
 - フォルダ名や場所の変更は、関連する複数ファイルの動きをまとめて推定し、「フォルダA → フォルダB」のように一目で分かる表現で表示します

## 4. 応答例

### 開始時
```
🔄 Git同期処理を開始します
```

### 未コミット変更のコミット時
```
📝 ローカル変更をコミット中...
コミットメッセージ: "🤖 自動コミット: <変更内容>"
```

### Fast-forward失敗時
```
⚠️ マージが必要です。自動マージ中...
```

### コンフリクト解決提案時
```
⚠️ コンフリクトが発生しました。以下の解決案を提案します：
**ファイル**: <ファイル名>
**解決方法**: リモートとローカルの変更を両方取り込みました。

\`\`\`diff
<解決後のコード差分>
\`\`\`

この解決案でよろしいですか？ (はい/いいえ)
```

### 取得時の変更プレビュー（事前確認）
```
📂 取得予定の変更（まだ反映しません）
- 名前変更: materials/clients/old-name → materials/clients/new-name
- 移動: templates/client-directory-template を templates/client-kit に移動（配下ごと）
- 削除: articles/tmp/ を削除
- 追加: materials/assets/new-logo.png を追加
```

### 完了時
```
✅ 同期完了！
- ローカル: X件のコミット
- リモート: Y件の更新
- 最新: abcd123 <コミットメッセージ>
```

### 同期後の変更サマリー
```
📦 取り込まれた変更
- 名前変更: materials/clients/foo → materials/clients/bar
- 移動: templates/old を templates/new に移動
- 削除: docs/legacy/ を削除
- 追加: system/utils/date-utils.js を追加
```

## 5. エラー対応
- **認証エラー**: GitHub認証確認
- **ネットワークエラー**: 接続確認  
- **コンフリクト**: 手動解決が必要な場合は処理中断
- **自動解決が困難な場合**: 専門家確認を促す